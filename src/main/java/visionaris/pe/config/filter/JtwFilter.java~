package visionaris.pe.config.filter;

import com.auth0.jwt.interfaces.DecodedJWT;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import org.springframework.http.HttpHeaders;
import visionaris.pe.config.jwt.JwtUtils;


import java.io.IOException;

@Component
public class JwtTokenValidator extends OncePerRequestFilter {

    @Autowired
    private JwtUtils jwtUtils;

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        // Obtener el token JWT del encabezado Authorization
        String jwtToken = request.getHeader(HttpHeaders.AUTHORIZATION);

        if (jwtToken != null && jwtToken.startsWith("Bearer ")) {
            // Extraer el token sin el prefijo "Bearer "
            jwtToken = jwtToken.substring(7);

            try {
                // Validar el token
                DecodedJWT decodedJWT = jwtUtils.validateToken(jwtToken);

                // Extraer el username (o email) del token
                String username = jwtUtils.extractUsername(decodedJWT);

                // Crear el objeto Authentication con el username (sin roles)
                Authentication authenticationToken = new UsernamePasswordAuthenticationToken(
                        username, null, null); // No hay roles, por eso el tercer argumento es null

                // Establecer los detalles de la solicitud
                authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                // Establecer el contexto de seguridad con el token de autenticación
                SecurityContext context = SecurityContextHolder.createEmptyContext();
                context.setAuthentication(authenticationToken);
                SecurityContextHolder.setContext(context);

            } catch (Exception e) {
                // Si el token es inválido o ha expirado, retornar 401 Unauthorized
                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
                response.getWriter().write("Token inválido o expirado");
                return;
            }
        }

        // Continuar con la cadena de filtros
        filterChain.doFilter(request, response);
    }
}
